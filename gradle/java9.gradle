/**
 * Tests tasks to allow the gradual introduction of JDK 9 support
 */
String jdkVarName = 'JAVA_9'

task java9IntegTest(type: Test) {
    excludes = [
        /*
         "changing method body of API class should not trigger recompilation of the consuming library when API is not declared" and
         "changing method body of API class should not trigger recompilation of the consuming library when API is declared" are failing -
          need to investigate
          */
        "JavaCompilationAgainstApiJarIntegrationTest",

        // "targetplatforms sample creates a binary specific source set" tries to compile for Java 5 - need to update test, samples and userguide
        "SampleJavaLanguageIntegrationTest",

        // Cannot obtain Jvm arguments via java.lang.management.ManagementFactory.runtimeMXBean.inputArguments module java.management does not export sun.management to unnamed module @6427ecb
        "BuildEnvironmentModelCrossVersionSpec",  // "informs about java args as in the build script"
        "JavaConfigurabilityCrossVersionSpec", // "customized java args are reflected in the inputArguments and the build model", "tooling api provided jvm args take precedence over gradle.properties"
        "GradlePropertiesToolingApiCrossVersionSpec", // "tooling api honours jvm args specified in gradle.properties"

        // Add a dedicated Findbugs test for Java 9
        "FindBugsIntegrationTest",

        // Looks like Pmd is broken with Java 9
        "PmdPluginAuxclasspathIntegrationTest",
        "PmdPluginDependenciesIntegrationTest",
        "PmdPluginVersionIntegrationTest",

        // Codenarc does not work on Java 9 - therefore it will not fail with PermGenSpaceError
        "IsolatedAntBuilderMemoryLeakIntegrationTest",

        // Osgi is broken with a NPE in Processor - need to investigate
        "OsgiPluginIntegrationSpec",

        // Old Gradle cannot run against Java 9
        // class org.gradle.internal.reflect.DirectInstantiator cannot access class com.sun.tools.javac.api.JavacTool (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.api to unnamed module @4030a92
        "org/gradle/integtests/tooling/r22/BuildActionCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/BuildProgressCrossVersionSpec",
        "org/gradle/integtests/tooling/r25/ContinuousBuildCancellationCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/ContinuousBuildCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/ContinuousBuildProgressEventsCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/DeploymentHandleContinuousBuildCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/ProgressCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/TaskProgressCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/TestProgressCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r25/TestProgressDaemonErrorsCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r26/TestLauncherCrossVersionSpec", // current -> 2.13
        "org/gradle/integtests/tooling/r27/TestLauncherCrossVersionSpec", // current -> 2.13
        "JavaProjectCrossVersionIntegrationTest", // previous = 2.13 or older
        "TaskSubclassingBinaryCompatibilityCrossVersionSpec", // previous = 2.13 or older
        "TaskUpToDateCrossVersionIntegrationTest", // previous = 2.13 or older
        "TestFilteringCrossVersionSpec", // current -> 2.13
        "DependencySubstitutionGradleConnectionCrossVersionSpec", // current -> 2.14
        // Attempts to run Gradle 2.8 on Java 9
        "HeterogeneousCompositeBuildCrossVersionSpec",

        // Broken scala and twirl compilation
        "MixedPlayAndJvmLibraryProjectIntegrationTest",
        "PlayAppWithFailingTestsIntegrationTest",
        "PlayMultiProjectApplicationIntegrationTest",
        "PlayPlatformIntegrationTest",
        "PlayBinaryAdvancedAppIntegrationTest",
        "PlayDistributionAdvancedAppIntegrationTest",
        "PlayBinaryBasicAppIntegrationTest",
        "PlayDistributionBasicAppIntegrationTest",
        "PlayTestBasicAppIntegrationTest",
        "PlayContinuousBuildIntegrationTest",
        "PlayMultiProjectContinuousBuildIntegrationTest",
        "PlayMultiProjectReloadIntegrationTest",
        "PlayReloadIntegrationTest",
        "PlayTwirlCompilerContinuousIntegrationTest",
        "PlayBinaryAppWithDependenciesIntegrationTest",
        "PlayDistributionAppWithDependenciesIntegrationTest",
        "PlayTestAppWithDependenciesIntegrationTest",
        "AdvancedPlaySampleIntegrationTest",
        "BasicPlaySampleIntegrationTest",
        "MultiprojectPlaySampleIntegrationTest",
        "UserGuidePlaySamplesIntegrationTest",
        "PlayApplicationPluginIntegrationTest",
        "Play23RoutesCompileIntegrationTest",
        "Play24RoutesCompileIntegrationTest",
        "PlayAssetsJarIntegrationTest",
        "PlayRunIntegrationTest",
        "TwirlCompileIntegrationTest",
        "TwirlVersionIntegrationTest",
        "PlayIdeaPluginAdvancedIntegrationTest",
        "PlayIdeaPluginBasicIntegrationTest",
        "PlayIdeaPluginMultiprojectIntegrationTest",
        "ProjectLayoutIntegrationTest",
        "SamplesMixedJavaAndScalaIntegrationTest",
        "SamplesScalaCustomizedLayoutIntegrationTest",
        "SamplesScalaQuickstartIntegrationTest",
        "JointScalaLangIntegrationTest",
        "SampleScalaLanguageIntegrationTest",
        "ScalaCompileParallelIntegrationTest",
        "ScalaCompilerContinuousIntegrationTest",
        "ScalaLanguageIncrementalBuildIntegrationTest",
        "ScalaLanguageIntegrationTest",
        "ScalaCrossCompilationIntegrationTest",
        "IncrementalScalaCompileIntegrationTest",
        "ZincScalaCompilerIntegrationTest",
        "ScalaTestIntegrationTest",
        "ScalaLibraryInitIntegrationTest",
        "ZincScalaCompilerMultiVersionIntegrationTest",

        // Sample attempts to set max perm space
        "SamplesScalaZincIntegrationTest",

        // Cannot build Gradle with Java 9, compiler bug
        "SrcDistributionIntegrationSpec",

        // Test compiles for Java 5
        "ToolingApiUnsupportedClientJvmCrossVersionSpec",
        "MavenConversionIntegrationTest",

        // Jetty version does not work on Java 9
        "JettyIntegrationSpec",
        "SamplesWebQuickstartIntegrationTest",

        // Missing class javax/xml/bind/DatatypeConverter on PUT to S3
        "S3ClientIntegrationTest",
        "IvyPublishS3IntegrationTest",
        "IvyS3UploadArchivesIntegrationTest",
        "MavenPublishS3IntegrationTest",

        // Test assumes there is a tools.jar
        "IvyPublishHttpIntegTest",
        "IvyHttpPublishIntegrationTest",

        /*
        java.lang.reflect.InaccessibleObjectException: Cannot make a non-public member of class java.lang.reflect.AccessibleObject accessible
        at jdk.internal.reflect.Reflection.throwInaccessibleObjectException(java.base@9-ea/Reflection.java:414)
        for AST tests
         and
        java.lang.RuntimeException: Annotation Processor Classpath is contaminated by Gradle ClassLoader
	        at com.test.SimpleAnnotationProcessor.process(SimpleAnnotationProcessor.java:22)
	     for AnnotationProcessorTest
         */
        "InvokeDynamicGroovyCompilerSpec",

        // Various problems, eg scala compile
        "UserGuideSamplesIntegrationTest",

        /*
         "compile only dependencies are not included in distribution":
         error: error reading ...1.0/compile-1.0.jar; zip END header not found
         */
        "ApplicationPluginIntegrationTest",
        /*
        "resolved classpath does not include transitive compile-scoped maven dependencies of local components"
        "resolved classpath includes transitive api-scoped dependencies of maven library dependency"
        error: zip END header not found
         */
        "JavaLanguageExternalDependencyResolutionIntegrationTest",

        /*
         Changes in Javadoc generation
         */
        "SamplesJavaMultiProjectIntegrationTest",

        /*
         * "dashboard includes JaCoCo reports" fails since Jacoco fails
         */
        "BuildDashboardPluginIntegrationTest",

        /*
         Jacoco 0.7.7.201606060606 seems to work for Java 9. The test needs to
         be fixed since the HTML report is a little bit different
         */
        "JacocoPluginIntegrationTest",

        /*
         Caused by: java.lang.IllegalAccessException: class org.mozilla.javascript.MemberBox cannot access class sun.net.www.protocol.http.HttpURLConnection (in module java.base) because module java.base does not export sun.net.www.protocol.http to unnamed module @2afcc5b3
            at jdk.internal.reflect.Reflection.throwIllegalAccessException(java.base@9-ea/Reflection.java:405)
            at jdk.internal.reflect.Reflection.throwIllegalAccessException(java.base@9-ea/Reflection.java:396)
            at jdk.internal.reflect.Reflection.ensureMemberAccess(java.base@9-ea/Reflection.java:98)
            at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:161)
            for "can evaluate content"
         */
        "EnvJsPluginIntegrationTest",

        /*
         Uses bytebuddy in a test which uses asm which cannot read Java 9 classfiles
         */
        "DirectoryScanningIntegTest",

        /*
         No reference to Build Script in log output
         */
        "DeprecationHandlingIntegrationTest",

        /*
          MaxPermSize as GRADLE_OPTS
         */
        "ClientShutdownCrossVersionSpec",

        /*
         Runs against older Gradle versions
         Compilation fails for Java 9 on current Gradle version
         */
        "CompositeBuildDependencyArtifactsCrossVersionSpec",
        "CompositeBuildDependencyGraphCrossVersionSpec",
    ].collect { "**/*${it}*" }
}

task java9Test(type: Test) {
}

tasks.withType(Test).matching { it.name.startsWith("java9") }.all {
    doFirst {
        jvmArgs = []
    }
    def java9Home = System.getenv('JAVA_9')
    executable = "${java9Home}/bin/java"
    environment['JAVA_HOME'] = java9Home
    reports.junitXml.destination = file("${project.testResultsDir}/$name")
    reports.html.destination = file("${project.reporting.baseDir}/$name")
    if (name.contains('IntegTest')) {
        systemProperties['org.gradle.integtest.executer'] = 'forking'
    }
}

if (!gradle.hasProperty("haveInstalledJava9Guard")) {
    gradle.taskGraph.whenReady { graph ->
        if (gradle.taskGraph.allTasks.any { it.name.startsWith("java9") }) {
            // Ideally, this would be a validate rule but it's not convenient to express this in the DSL yet
            if (!System.getenv(jdkVarName)) {
                throw new GradleException("A '$jdkVarName' environment variable, " +
                    "pointing to a java 9 JDK image, is required to run java9 tests!")
            }
        }
    }
    gradle.ext.haveInstalledJava9Guard = true
}
