import org.gradle.build.BuildTypes

/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def buckets = [
    '1': [':modelCore', ':announce', ':antlr', ':internalIntegTesting', ':internalTesting', ':maven', ':messaging',
          ':performance', ':platformBase', ':platformJvm', ':buildComparison', ':buildInit', ':cli', ':codeQuality', ':testKit',
          ':docs', ':ear', ':ide', ':ideNative', ':ivy', ':jacoco', ':javascript', ':jetty', ':languageGroovy', ':languageJvm',
          ':launcher', ':languageNative', ':platformNative', ':testingNative', ':native'
    ],

    '2': [':platformPlay', ':dependencyManagement', ':core', ':toolingApi',
          ':modelGroovy', ':pluginDevelopment', ':pluginUse', ':publish', ':scala', ':signing', ':sonar',
          ':openApi', ':osgi', ':toolingApiBuilders', ':ui', ':wrapper', ':languageScala', ':diagnostics',
          ':plugins', ':integTest',
          ':baseServices', ':baseServicesGroovy', ':reporting', ':resources', ':resourcesHttp', ':resourcesS3', ':resourcesSftp',
          ':distributions', ':languageJava'
    ]
]

//Make sure all projects are accounted for
def coveredProjects = (buckets.collect { it.value }).flatten()
assert coveredProjects.size() == subprojects.size(): "The following projects should be added to a bucket: ${subprojects.collect { ":${it.name}" } - coveredProjects}"


buckets.each { String bucketName, List<String> projects ->
    buildTypeList.each { BuildTypes.BuildType buildType ->
        def tasks = tasksForProjects(buildType, projects)
        project.getExtensions().buildTypes."${buildType.name + bucketName}"(tasks, buildType.projectProperties)
    }

}

def tasksForProjects(BuildTypes.BuildType buildType, List<String> projects) {
    Set tasks = []
    projects.each {
        buildType.tasks.each { String task ->
            if (!task.contains(':')) {
                tasks << ["$project:${task}"]
            } else {
                tasks << task
            }
        }
    }
    return tasks
}
