plugins  {
    id 'java'
    id 'ivy-publish'
}

group = 'org.gradle.sample'
version = '1.0'

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

// tag::publishing[]
publishing {
    publications {
        binary(IvyPublication) {
            from components.java
        }
        binaryAndSources(IvyPublication) {
            from components.java
            artifact sourcesJar
        }
    }
    repositories {
        // change URLs to point to your repos, e.g. http://my.org/repo
        ivy {
            name "external"
            url layout.buildDirectory.dir('repos/external')
        }
        ivy {
            name "internal"
            url layout.buildDirectory.dir('repos/internal')
        }
    }
}
// end::publishing[]

// tag::task-config[]
tasks.withType(PublishToIvyRepository) {
    def predicate = repository.zip(publication) { repo, pub ->
        (repo == publishing.repositories.external && pub == publishing.publications.binary)
            || (repo == publishing.repositories.internal && pub == publishing.publications.binaryAndSources)
    }
    onlyIf("publishing binary to the external repository, or binary and sources to the internal one") {
        predicate.get()
    }
}
// end::task-config[]

// tag::shorthand-tasks[]
tasks.register('publishToExternalRepository') {
    group "publishing"
    description "Publishes all Ivy publications to Ivy repository 'external'."
    dependsOn tasks.withType(PublishToIvyRepository).matching {
        it.repository.get() == publishing.repositories.external
    }
}
tasks.register('publishToInternalRepository') {
    group "publishing"
    description "Publishes all Ivy publications to Ivy repository 'internal'."
    dependsOn tasks.withType(PublishToIvyRepository).matching {
        it.repository.get() == publishing.repositories.internal
    }
}
// end::shorthand-tasks[]
