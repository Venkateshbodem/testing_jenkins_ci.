import org.gradle.model.*
import org.gradle.model.collection.*

@Managed
interface Flavour {
    String getName()
    void setName(String name)
}

@Managed
interface Type {
    String getName()
    void setName(String name)
}

@Managed
abstract class Variant {
    abstract Flavour getFlavour()
    abstract void setFlavour(Flavour flavour)

    abstract Type getType()
    abstract void setType(Type type)

    String getName() {
        flavour.name + type.name
    }
}

class VariantsRuleSource extends RuleSource {
    @Model
    void flavours(ManagedSet<Flavour> flavours) {
    }

    @Model
    void types(ManagedSet<Type> types) {
    }

    @Model
    void variants(ManagedSet<Variant> variants, ManagedSet<Flavour> flavours, ManagedSet<Type> types) {
        flavours.each { flavour ->
            types.each { type ->
                variants.create {
                    it.flavour = flavour
                    it.type = type
                }
            }
        }
    }

    @Mutate
    void addVariantTasks(CollectionBuilder<Task> tasks, ManagedSet<Variant> variants) {
        variants.each {
            tasks.create(it.name)
        }
    }

    @Mutate
    void addAllVariantsTasks(CollectionBuilder<Task> tasks, ManagedSet<Variant> variants) {
        tasks.create("allVariants") { allVariants ->
            variants.each {
                allVariants.dependsOn it.name
            }
        }
    }
}

apply type: VariantsRuleSource

model {
    flavours {
        <% flavourCount.times { %>
        create {
            name = "flavour${it + 1}"
        }
        <% } %>
    }

    types {
        <% typeCount.times { %>
        create {
            name = "type${it + 1}"
        }
        <% } %>
    }
}