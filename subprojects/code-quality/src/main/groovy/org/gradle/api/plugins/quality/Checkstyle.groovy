/*
 * Copyright 2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.api.plugins.quality


import org.gradle.api.GradleException
import org.gradle.api.Incubating
import org.gradle.api.file.FileCollection
import org.gradle.api.internal.file.AntFileCollectionBuilder
import org.gradle.api.internal.project.AntBuilderDelegate
import org.gradle.api.internal.tasks.compile.daemon.CompilerDaemonManager
import org.gradle.api.internal.tasks.compile.daemon.DaemonForkOptions
import org.gradle.api.plugins.quality.internal.CheckstyleReportsImpl
import org.gradle.api.plugins.quality.internal.forking.AntExecutionSpec
import org.gradle.api.plugins.quality.internal.forking.AntProcessBuilder
import org.gradle.api.plugins.quality.internal.forking.AntResult
import org.gradle.api.plugins.quality.internal.forking.AntSourceBuilder
import org.gradle.api.plugins.quality.internal.forking.AntWorkerManager
import org.gradle.api.plugins.quality.internal.forking.AntWorkerSpec
import org.gradle.api.plugins.quality.internal.forking.RootAntSourceBuilder
import org.gradle.api.plugins.quality.internal.forking.next.AntWorkerClientsManager
import org.gradle.api.plugins.quality.internal.forking.next.AntWorkerDaemon
import org.gradle.api.plugins.quality.internal.forking.next.AntWorkerDaemonManager
import org.gradle.api.reporting.Reporting
import org.gradle.api.resources.TextResource
import org.gradle.api.tasks.*
import org.gradle.internal.Factory
import org.gradle.internal.reflect.Instantiator
import org.gradle.logging.ConsoleRenderer
import org.gradle.process.internal.WorkerProcessBuilder
import org.gradle.util.GUtil

import javax.inject.Inject


/**
 * Runs Checkstyle against some source files.
 */
@ParallelizableTask
class Checkstyle extends SourceTask implements VerificationTask, Reporting<CheckstyleReports> {

    private static final String GRADLE_CHECKSTYLE_VIOLATIONS = "org.gradle.checkstyle.violations"

    /**
     * The class path containing the Checkstyle library to be used.
     */
    @InputFiles
    FileCollection checkstyleClasspath

    /**
     * The class path containing the compiled classes for the source files to be analyzed.
     */
    @InputFiles
    FileCollection classpath

    /**
     * The Checkstyle configuration to use. Replaces the {@code configFile} property.
     *
     * @since 2.2
     */
    @Incubating
    @Nested
    TextResource config

    /**
     * The Checkstyle configuration file to use.
     */
    File getConfigFile() {
        getConfig()?.asFile()
    }

    /**
     * The Checkstyle configuration file to use.
     */
    void setConfigFile(File configFile) {
        setConfig(project.resources.text.fromFile(configFile))
    }

    /**
     * The properties available for use in the configuration file. These are substituted into the configuration
     * file.
     */
    @Input
    @Optional
    Map<String, Object> configProperties = [:]

    @Nested
    private final CheckstyleReportsImpl reports

    Checkstyle() {
        reports = instantiator.newInstance(CheckstyleReportsImpl, this)
    }

    @Inject
    Instantiator getInstantiator() {
        throw new UnsupportedOperationException();
    }

    /**
     * The reports to be generated by this task.
     *
     * @return The reports container
     */
    CheckstyleReports getReports() {
        reports
    }

    /**
     * Configures the reports to be generated by this task.
     *
     * The contained reports can be configured by name and closures. Example:
     *
     * <pre>
     * checkstyleTask {*   reports {*     xml {*       destination "build/codenarc.xml"
     *}*}*}* </pre>
     *
     * @param closure The configuration
     * @return The reports container
     */
    CheckstyleReports reports(Closure closure) {
        reports.configure(closure)
    }

    /**
     * Whether or not this task will ignore failures and continue running the build.
     */
    boolean ignoreFailures

    /**
     * Whether or not rule violations are to be displayed on the console.
     */
    boolean showViolations = true

    @TaskAction
    public void run() {
        AntWorkerDaemonManager antWorkerManager = getServices().get(AntWorkerDaemonManager.class);
        def daemon = antWorkerManager.getDaemon(project.getProjectDir(), new DaemonForkOptions("1g", "1g", []))
        def spec = new AntWorkerSpec(project.getProjectDir(), getCheckstyleClasspath(), new CheckstyleAntAction(this))
        def antResult = daemon.execute(spec)

        if(antResult.errorCount != 0) {
            throw new RuntimeException(antResult.throwable)
        }

        if (antResult.getProjectProperties()[GRADLE_CHECKSTYLE_VIOLATIONS]) {
            def message = "Checkstyle rule violations were found."
            def report = reports.firstEnabled
            if (report) {
                def reportUrl = new ConsoleRenderer().asClickableFileUrl(report.destination)
                message += " See the report at: $reportUrl"
            }
            if (getIgnoreFailures()) {
                logger.warn(message)
            } else {
                throw new GradleException(message)
            }
        }
    }

    private static class CheckstyleAntAction implements AntExecutionSpec {

        private final File configFile;
        private final AntSourceBuilder sources;
        private final Set<File> classpath = new LinkedHashSet<>()
        private final boolean showViolations;
        private final Map<String, Object> configProperties;
        private final boolean isXmlEnabled;
        private final File xmlReportDestination;

        CheckstyleAntAction(Checkstyle checkstyle) {
            this.configFile = checkstyle.configFile.absoluteFile
            this.sources = new RootAntSourceBuilder(checkstyle.getSource(), 'fileset', FileCollection.AntType.FileSet)
            GUtil.addToCollection(classpath, checkstyle.getCheckstyleClasspath())
            this.showViolations = checkstyle.showViolations
            this.configProperties = checkstyle.configProperties
            this.isXmlEnabled = checkstyle.getReports().xml.enabled
            this.xmlReportDestination = isXmlEnabled != null ? checkstyle.getReports().xml.destination : null
        }

        @Override
        void execute(AntBuilderDelegate antBuilder) {
            try {
                antBuilder.taskdef(name: 'checkstyle', classname: 'com.puppycrawl.tools.checkstyle.CheckStyleTask')
            } catch (ClassNotFoundException cnfe) {
                antBuilder.taskdef(name: 'checkstyle', classname: 'com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask')
            }

            antBuilder.checkstyle(config: configFile, failOnViolation: false, failureProperty: GRADLE_CHECKSTYLE_VIOLATIONS) {
                sources.apply(antBuilder)
                new AntFileCollectionBuilder(classpath).addToAntBuilder(antBuilder, 'classpath')
                if (showViolations) {
                    formatter(type: 'plain', useFile: false)
                }
                if (isXmlEnabled) {
                    formatter(type: 'xml', toFile: xmlReportDestination)
                }

                configProperties.each { key, value ->
                    property(key: key, value: value.toString())
                }
            }
        }
    }
}
