/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.api.plugins.quality

import org.gradle.api.GradleException
import org.gradle.api.file.FileCollection
import org.gradle.api.internal.Instantiator
import org.gradle.api.plugins.quality.internal.FindBugsReportsImpl
import org.gradle.api.plugins.quality.internal.findbugs.FindBugsDaemonManager
import org.gradle.api.plugins.quality.internal.findbugs.FindBugsResult
import org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec
import org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder
import org.gradle.api.reporting.Reporting
import org.gradle.api.reporting.SingleFileReport
import org.gradle.api.tasks.*

/**
 * Analyzes code with <a href="http://findbugs.sourceforge.net">FindBugs</a>.
 */
class FindBugs extends SourceTask implements VerificationTask, Reporting<FindBugsReports> {
    /**
     * The classes to be analyzed.
     */
    @SkipWhenEmpty
    @InputFiles
    FileCollection classes

    /**
     * Compile class path for the classes to be analyzed.
     * The classes on this class path are used during analysis
     * but aren't analyzed themselves.
     */
    @InputFiles
    FileCollection classpath

    /**
     * Class path holding the FindBugs library.
     */
    @InputFiles
    FileCollection findbugsClasspath

    /**
     * Class path holding any additional FindBugs plugins.
     */
    @InputFiles
    FileCollection pluginClasspath

    /**
     * Whether or not to allow the build to continue if there are warnings.
     */
    boolean ignoreFailures

    /**
     * Set the analysis effort level. The value specified should be one of min, default, or max. See
     * <a href="http://findbugs.sourceforge.net/manual/running.html#commandLineOptions">Chapter 4, Section 3‰ "Command-line Options"</a>
     * for more information about setting the analysis level.
     */
    @Optional
    String effort

    /**
     * An optional attribute. It specifies the priority threshold for reporting bugs. If set to "low", all bugs are reported. If set to
     * "medium" (the default), medium and high priority bugs are reported. If set to "high", only high priority bugs are reported.
     */
    @Optional
    String reportLevel

    /**
     * Optional attribute. It specifies a comma-separated list of bug detectors which should be run. The bug detectors are specified by
     * their class names, without any package qualification. By default, all detectors which are not disabled by default are run.
     */
    // TODO Add DSL methods to building up visitors list
    @Optional
    Collection<String> visitors

    /**
     * Optional attribute. It is like the visitors attribute, except it specifies detectors which will not be run.
     */
    // TODO Add DSL methods to building up omitVisitors list
    @Optional
    Collection<String> omitVisitors

    /**
     * Optional attribute. It specifies the filename of a filter specifying bugs to exclude from being reported. See
     * <a href="http://findbugs.sourceforge.net/manual/filter.html">Chapter 8, Filter Files</a>. This is not the same as the
     * exclude parameter, which influences the source parameter.
     */
    @InputFile
    @Optional
    File excludeFilter

    /**
     * Optional attribute. It specifies the filename of a filter specifying which bugs are reported. See
     * <a href="http://findbugs.sourceforge.net/manual/filter.html">Chapter 8, Filter Files</a>. This is not the same as the
     * include parameter, which influences the source parameter.
     */
    @InputFile
    @Optional
    File includeFilter

    @Nested
    private final FindBugsReportsImpl reports = services.get(Instantiator).newInstance(FindBugsReportsImpl, this)

    /**
     * The reports to be generated by this task.
     *
     * @return The reports container
     */
    FindBugsReports getReports() {
        reports
    }

    /**
     * Configures the reports to be generated by this task.
     *
     * The contained reports can be configured by name and closures. Example:
     *
     * <pre>
     * findbugsTask {
     *   reports {
     *     xml {
     *       destination "build/findbugs.xml"
     *     }
     *   }
     * }
     * </pre>
     *
     * @param closure The configuration
     * @return The reports container
     */
    FindBugsReports reports(Closure closure) {
        reports.configure(closure)
    }

    @TaskAction
    void run() {
        FindBugsSpec spec = generateSpec()
        FindBugsDaemonManager manager = new FindBugsDaemonManager();
        FindBugsResult findbugsResult = manager.runDaemon(getProject(), getFindbugsClasspath(), spec)
        evaluateResult(findbugsResult);
    }

    FindBugsSpec generateSpec() {
        FindBugsSpecBuilder argumentBuilder = new FindBugsSpecBuilder(getClasses())
            .withPluginsList(getPluginClasspath())
            .withSources(getSource())
            .withClasspath(getClasspath())
            .withDebugging(logger.isDebugEnabled())
            .withEffort(effort)
            .withReportLevel(reportLevel)
            .withVisitors(visitors)
            .withOmitVisitors(omitVisitors)
            .withExcludeFilter(excludeFilter)
            .withIncludeFilter(includeFilter)
            .configureReports(reports)

        FindBugsSpec spec = argumentBuilder.build()
        return spec
    }

    void evaluateResult(FindBugsResult findbugsResult) {
        if (findbugsResult.errorCount){
            throw new GradleException("FindBugs encountered an error. Run with --debug to get more information.")
        }
        if (findbugsResult.bugCount && !ignoreFailures) {
            SingleFileReport reportSetup = reports.firstEnabled
            if (reports.firstEnabled) {
                throw new GradleException("FindBugs rule violations were found. See the report at ${reportSetup.destination}.")
            } else {
                throw new GradleException("FindBugs rule violations were found.")
            }
        }
    }
}