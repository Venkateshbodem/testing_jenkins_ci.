/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.play.plugins

import org.gradle.integtests.fixtures.JUnitXmlTestExecutionResult
import org.gradle.integtests.fixtures.MultiVersionIntegrationSpec
import org.gradle.integtests.fixtures.TargetCoverage
import org.gradle.integtests.fixtures.TestResources
import org.gradle.play.fixtures.PlayCoverage
import org.gradle.test.fixtures.archive.JarTestFixture
import org.gradle.util.TextUtil
import org.junit.Rule

@TargetCoverage({PlayCoverage.DEFAULT})
class PlayApplicationCrossVersionTest extends MultiVersionIntegrationSpec{

    @Rule
    public final TestResources resources = new TestResources(temporaryFolder)

    def setup() {
        buildFile << """
        plugins {
            id 'play-application'
        }

        model {
            components {
                myApp(PlayApplicationSpec){
                    playVersion "${version}"
                }
            }
        }

        repositories{
            jcenter()
            maven{
                name = "typesafe-maven-release"
                url = "http://repo.typesafe.com/typesafe/maven-releases"
            }
        }
"""
    }

    def "can build play apps generated by 'play new'"() {
        given:
        resources.maybeCopy("PlayApplicationPluginIntegrationTest/playNew")
        when:
        succeeds("assemble")
        then:
        executedAndNotSkipped(":routesCompileMyAppBinary", ":twirlCompileMyAppBinary", ":createMyAppBinaryJar", ":myAppBinary", ":assemble")

        and:
        jar("build/jars/myApp/myAppBinary.jar").containsDescendants(
                "Routes.class",
                "views/html/index.class",
                "views/html/main.class",
                "controllers/Application.class",
                "images/favicon.png",
                "stylesheets/main.css",
                "javascripts/hello.js",
                "application.conf")

        when:
        succeeds("createMyAppBinaryJar")
        then:
        skipped(":createMyAppBinaryJar", ":twirlCompileMyAppBinary")
    }

    def "can build play certain customized apps"() {
        given:
        resources.maybeCopy("PlayApplicationPluginIntegrationTest/playCustom1")
        when:
        succeeds("assemble")
        then:
        executedAndNotSkipped(":routesCompileMyAppBinary", ":twirlCompileMyAppBinary", ":createMyAppBinaryJar", ":myAppBinary", ":assemble")

        and:
        jar("build/jars/myApp/myAppBinary.jar").containsDescendants(
                "Routes.class",
                "views/html/index.class",
                "views/html/main.class",
                "controllers/Application.class",
                "images/favicon.png",
                "stylesheets/main.css",
                "javascripts/hello.js",
                "application.conf")

        when:
        succeeds("createMyAppBinaryJar")
        then:
        skipped(":createMyAppBinaryJar", ":twirlCompileMyAppBinary")
    }

    def "can run play app tests generated by 'play new'"() {
        given:
        resources.maybeCopy("PlayApplicationPluginIntegrationTest/playNew")
        when:
        succeeds("testMyAppBinary")
        then:
        executed(":routesCompileMyAppBinary", ":twirlCompileMyAppBinary", ":scalaCompileMyAppBinary",
                ":createMyAppBinaryJar", ":myAppBinary", ":compileMyAppBinaryTests", ":testMyAppBinary")

        def result = new JUnitXmlTestExecutionResult(testDirectory, "build/reports/test/myAppBinary")
        result.assertTestClassesExecuted("ApplicationSpec", "IntegrationSpec")
        result.testClass("ApplicationSpec").assertTestCount(2, 0, 0)
        result.testClass("IntegrationSpec").assertTestCount(1, 0, 0)

        when:
        succeeds("testMyAppBinary")
        then:
        skipped(":routesCompileMyAppBinary", ":twirlCompileMyAppBinary", ":scalaCompileMyAppBinary",
                ":createMyAppBinaryJar", ":myAppBinary", ":compileMyAppBinaryTests", ":testMyAppBinary")
    }

    def "reports failing run play app tests"() {
        given:
        resources.maybeCopy("PlayApplicationPluginIntegrationTest/playNew")
        resources.maybeCopy("PlayApplicationPluginIntegrationTest/playFailingTests")
        when:
        fails("testMyAppBinary")
        then:

        output.contains(TextUtil.toPlatformLineSeparators("""
FailingApplicationSpec > Application should::render the index page FAILED
    org.specs2.reporter.SpecFailureAssertionFailedError
"""))

        output.contains(TextUtil.toPlatformLineSeparators("""
FailingIntegrationSpec > Application should::work from within a browser FAILED
    org.specs2.reporter.SpecFailureAssertionFailedError
"""))
        errorOutput.contains("6 tests completed, 2 failed")
        errorOutput.contains("> There were failing tests.")

        def result = new JUnitXmlTestExecutionResult(testDirectory, "build/reports/test/myAppBinary")
        result.assertTestClassesExecuted("ApplicationSpec", "IntegrationSpec", "FailingApplicationSpec", "FailingIntegrationSpec")
        result.testClass("ApplicationSpec").assertTestCount(2, 0, 0)
        result.testClass("IntegrationSpec").assertTestCount(1, 0, 0)
        result.testClass("FailingIntegrationSpec").assertTestCount(1, 1, 0)
        result.testClass("FailingApplicationSpec").assertTestCount(2, 1, 0)
    }

    JarTestFixture jar(String fileName) {
        new JarTestFixture(file(fileName))
    }
}
