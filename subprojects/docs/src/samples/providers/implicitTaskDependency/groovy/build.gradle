
class Producer extends DefaultTask {
    @OutputFile
    final RegularFileProperty outputFile = project.objects.fileProperty()

    @TaskAction
    void produce() {
        String message = 'Hello, World!'
        def output = outputFile.get().asFile
        output.text = message
        logger.quiet("Wrote '${message}' to ${output}")
    }
}

class Consumer extends DefaultTask {
    @InputFile
    final RegularFileProperty inputFile = project.objects.fileProperty()

    @TaskAction
    void consume() {
        def input = inputFile.get().asFile
        def message = input.text
        logger.quiet("Read '${message}' from ${input}")
    }
}

task producer(type: Producer)
task consumer(type: Consumer)

// Wire property from producer to consumer task
// Don't need to add a task dependency to the consumer task, this is automatically added
consumer.inputFile = producer.outputFile

// Set values for the producer lazily
// Don't need to update the consumer.inputFile property, this is automatically updated
producer.outputFile = layout.buildDirectory.file('file.txt')

// Change the base output directory.
// Don't need to update producer.outputFile and consumer.inputFile, these are automatically updated
buildDir = 'output'
