@Managed
interface Address {
    String getCity()
    void setCity(String city)
}

@Managed
interface Person {
    String getFirstName()
    void setFirstName(String n)

    String getLastName()
    void setLastName(String n)

    Address getAddress()
}

@Managed
interface Programmer extends Person {
    int getDesiredSalary()
    void setDesiredSalary(int suggestedSalary)

    int getActualSalary()
    void setActualSalary(int actualSalary)
}

@Managed
interface Cloud {
    String getLooksLike()
    void setLooksLike(String looksLike)
}

@Managed
interface Cirrus extends Cloud {
}

class PersonRules extends RuleSource {
    @Model
    void people(ModelMap<Person> people) {
    }

    @Model
    void sky(ModelSet<Cloud> sky) {
    }
}

apply plugin: PersonRules

// START SNIPPET configure-rule
// START SNIPPET create-rule
// START SNIPPET rule-inputs
// START SNIPPET create-rule-no-config
// START SNIPPET managed-type-nested-config-rule
model {
// END SNIPPET create-rule
// END SNIPPET rule-inputs
// END SNIPPET create-rule-no-config
// END SNIPPET managed-type-nested-config-rule
    person {
        lastName = "Smith"
    }
// END SNIPPET configure-rule
// START SNIPPET managed-type-nested-config-rule
    person {
        address {
            city = "Melbourne"
        }
    }
// END SNIPPET managed-type-nested-config-rule
// START SNIPPET create-rule
    person(Person) {
        firstName = "John"
    }
// END SNIPPET create-rule
// START SNIPPET create-rule-no-config
    barry(Person)
// END SNIPPET create-rule-no-config
// START SNIPPET rule-inputs
    tasks {
        hello(Task) {
            def p = $.person
            doLast {
                println "Hello $p.firstName $p.lastName!"
            }
        }
    }
// START SNIPPET create-rule-no-config
// START SNIPPET configure-rule
// START SNIPPET create-rule
// START SNIPPET managed-type-nested-config-rule
}
// END SNIPPET create-rule
// END SNIPPET create-rule-no-config
// END SNIPPET configure-rule
// END SNIPPET rule-inputs
// END SNIPPET managed-type-nested-config-rule

// START SNIPPET model-map-nested-configure-rule
// START SNIPPET model-map-nested-create-rule
// START SNIPPET model-map-all-rule
// START SNIPPET model-set-create
model {
// END SNIPPET model-set-create
    people {
// END SNIPPET model-map-nested-create-rule
// END SNIPPET model-map-all-rule
        john {
            lastName = "Smith"
        }
        michael {
            actualSalary = 3
        }
// END SNIPPET model-map-nested-configure-rule
// START SNIPPET model-map-nested-create-rule
        john(Person) {
            firstName = "John"
        }
        michael(Programmer) {
            firstName = "Michael"
            desiredSalary = Long.MAX_VALUE
        }
// END SNIPPET model-map-nested-create-rule
// START SNIPPET model-map-all-rule
        all {
            println "configuring $it"
        }
// END SNIPPET model-map-all-rule
        barry(Person) {
            firstName = "Barry"
            lastName = "Barry"
        }
    }
// START SNIPPET model-set-create
    sky(ModelSet<Cloud>) {
        create(Cloud) {
            looksLike = "A Fish"
        }
        create(Cirrus) {
            looksLike = "Cotton Candy"
        }
// END SNIPPET model-set-create
    }
    tasks {
        listPeople(Task) {
            doLast {
                def p = $.people
                p.each {
                    println "Hello $it.firstName $it.lastName!"
                }
            }
        }
// START SNIPPET model-map-nested-create-rule
// START SNIPPET model-map-nested-configure-rule
// START SNIPPET model-map-all-rule
// START SNIPPET model-set-create
    }
}
// END SNIPPET model-map-nested-configure-rule
// END SNIPPET model-map-nested-create-rule
// END SNIPPET model-map-all-rule
// END SNIPPET model-set-create
