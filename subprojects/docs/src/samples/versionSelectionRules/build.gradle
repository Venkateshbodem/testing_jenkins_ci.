import org.gradle.api.artifacts.ivy.IvyModuleDescriptor

/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

repositories {
    mavenCentral()
}

// START SNIPPET reject-version-1.1
configurations {
    rejectConfig {
        resolutionStrategy {
            componentSelection {
                // Accept the highest version matching the requested version that isn't '1.1'
                all { ComponentSelection selection ->
                    if (selection.requested.group == 'org.sample'
                            && selection.requested.module == 'api'
                            && selection.candidate.version == '1.1') {
                        selection.reject("wrong version")
                    }
                }
            }
        }
    }
}
// END SNIPPET reject-version-1.1

// START SNIPPET version-selection-with-metadata
configurations {
    rejectConfig {
        resolutionStrategy {
            componentSelection {
                // Reject any versions with a status of 'experimental'
                all { ComponentSelection selection, ComponentMetadata metadata ->
                    if (selection.requested.group == 'org.sample'
                            && selection.requested.module == 'api'
                            && metadata.status == 'experimental') {
                        selection.reject("don't consider experimental candidates")
                    }
                }
                // Accept the highest version with a branch of 'testing' and a status of 'milestone'
                all { ComponentSelection selection, IvyModuleDescriptor descriptor, ComponentMetadata metadata ->
                    if (selection.requested.group == 'org.sample' && selection.requested.name == 'api') {
                        if (descriptor.branch != 'testing' || metadata.status != 'milestone') {
                            selection.reject("only consider testing branch with milestone status")
                        }
                    }
                }
            }
        }
    }
}
// END SNIPPET version-selection-with-metadata

configurations {
    sampleConfig {
        resolutionStrategy {
            componentSelection {
                all { ComponentSelection selection ->
                    // Force selector like 1.1+ to be interpreted as any
                    // version that starts with "1.1.", so 1.1, 1.1.0 or
                    // 1.1.20.1 would match, but not 1.2, 1.10 or 1.18.
                    if (selection.requested.version.endsWith('+')) {
                        def prefix = selection.requested.version - '+'
                        if (selection.candidate.version == prefix || selection.candidate.version.startsWith("${prefix}.")) {
                            logger.lifecycle("** Accepted version: ${selection.candidate.version} **")
                        } else {
                            logger.lifecycle("Rejected version: ${selection.candidate.version}")
                            selection.reject("Rejecting '${selection.candidate}' for '${selection.requested}'")
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    sampleConfig(group: 'com.sun.jersey.glassfish.v3', name: 'jersey-gfv3-docs-and-samples', version: '1.1+', ext: 'zip', classifier: 'project') { transitive = false }
}

task resolveConfiguration {
    doLast {
        configurations.sampleConfig.files.each { println it }
    }
}

