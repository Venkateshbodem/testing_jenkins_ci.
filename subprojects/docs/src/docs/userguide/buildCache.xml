<!--
  ~ Copyright 2016 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id='build_cache'>
    <note>
        <para>
            This feature is a work in progress.
        </para>
    </note>
    <note>
        <para>
            The build cache feature described here is different from the <ulink url="http://tools.android.com/tech-docs/build-cache">Android plugin build cache</ulink>.
        </para>
    </note>
    <title>Build Cache</title>
    <section id="sec:build_cache_intro">
        <title>Overview</title>
        <para>
            Build caching is a new kind of cache mechanism that aims to save time by reusing outputs produced by other builds.
        </para>
    </section>
    <section id="sec:build_cache_enable">
        <title>Enable the Build Cache</title>
        <para>
            By default, the <firstterm>build cache</firstterm> is not enabled. You can enable the build cache in a couple of ways:
            <varlistentry>
                <term>Run with <literal>--build-cache</literal> on the command-line.</term>
                <listitem>
                    <para>
                        Gradle will use the build cache for this build only.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Put <literal>org.gradle.caching=true</literal> in your <filename>gradle.properties</filename>.</term>
                <listitem>
                    <para>
                        Gradle will try to reuse outputs from previous builds for all builds, unless explicitly disabled with <literal>--no-build-cache</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </para>
    </section>
    <section id="sec:build_cache_configure">
        <title>Configure the Build Cache</title>
        <para>
            You can configure the build cache by using the <apilink class='org.gradle.api.initialization.Settings' method="buildCache(org.gradle.api.Action)"/> block in <literal>settings.gradle</literal>.
            <para>
                Gradle supports a <literal>local</literal> and <literal>remote</literal> build cache that can be configured separately.
                When both build caches are enabled, Gradle tries to load build outputs from the local build cache first and then tries the remote build cache if no build outputs are found.
                Gradle pushes build outputs to any build cache that is enabled and has <apilink class='org.gradle.caching.configuration.BuildCache' method="isPush()" /> set to <literal>true</literal>.
            </para>
            <para>
            By default, the local build cache has push enabled, and the remote build cache has push disabled.
            </para>
            <para>
                The local build cache is pre-configured to be a <apilink class='org.gradle.caching.local.DirectoryBuildCache'/> and enabled by default.
                The remote build cache can be configured by specifying the type of build cache to use (<apilink class='org.gradle.caching.configuration.BuildCacheConfiguration' method="local(java.lang.Class)"/>).
                Custom remote build cache types can be registered via <apilink class='org.gradle.caching.configuration.BuildCacheConfiguration' method="registerBuildCacheService(java.lang.Class, java.lang.Class)"/>.
            </para>
            <para>
                Gradle ships with a built-in remote build cache implementation that works via HTTP and can be configured as follows in a build's <literal>settings.gradle</literal>.
                Note that by using this configuration the local build will be used for storing build outputs while the local and the remote build cache will be used for retrieving build outputs.
            </para>
            <sample id="httpBuildCache" dir="buildCache/http-build-cache" title="Pull from HttpBuildCache">
                <sourcefile file="settings.gradle" snippet="http-build-cache"/>
            </sample>
            <para>
                In order to populate the remote build cache, pushing needs to be enabled and the local build cache can be disabled as shown in the following sample.
            </para>
            <sample id="pushToRemoteBuildCache" dir="buildCache/push-to-remote" title="Enable pushing to remote build cache">
                <sourcefile file="settings.gradle" snippet="push-to-remote"/>
            </sample>
            <para>
                You can configure the directory the <apilink class='org.gradle.caching.local.DirectoryBuildCache'/> uses to store the build outputs and
                the credentials the <apilink class='org.gradle.caching.http.HttpBuildCache'/> uses to access the build cache server as shown in the following example.
                <sample id="directoryAndHttpBuildCacheConfiguration" dir="buildCache/configure-built-in-caches" title="Configure built-in build caches">
                    <sourcefile file="settings.gradle" snippet="configure-built-in-build-caches"/>
                </sample>
            </para>
        </para>
    </section>
    <section id="sec:task_output_caching">
        <title>Task Output Caching</title>
        <para>
            Beyond incremental builds described in <xref linkend="sec:up_to_date_checks"/>, Gradle can save time by reusing outputs from previous executions of a task by matching inputs to the task.
            Task outputs can be reused between builds on one computer or even between builds running on different computers via a build cache.
        </para>
        <note>
            <para>
                This feature is a work in progress and is automatically enabled when you enable the build cache, see <xref linkend="sec:build_cache_enable"/>.
            </para>
        </note>
        <section id="sec:task_output_caching_faster">
            <title>Making builds faster</title>
            <para>
                Since a task describes all of its inputs and outputs, Gradle can compute a <firstterm>build cache key</firstterm> that uniquely defines the task's outputs based on its inputs.
                That build cache key is used to request previous outputs from a build cache or push new outputs to the build cache. If the previous build is already populated by someone else, e.g. your
                <firstterm>continuous integration</firstterm> server or other developers, you can avoid executing most tasks locally.
            </para>
            <para>
                The following inputs contribute to the build cache key for a task in the same way as they do for <link linked="sec:how_does_it_work">up to date checks</link>:
            </para>
            <itemizedlist>
                <listitem>The task type and its classpath</listitem>
                <listitem>The names of the output properties</listitem>
                <listitem>The names and values of properties annotated as described in <xref linkend="sec:task_input_output_annotations"/></listitem>
                <listitem>The names and values of properties added by the DSL via <apilink class="org.gradle.api.tasks.TaskInputs"/></listitem>
                <listitem>The classpath of the Gradle distribution, buildSrc and plugins</listitem>
                <listitem>The content of the build script when it affects execution of the task</listitem>
            </itemizedlist>
            <para>
                Task types need to opt-in to task output caching using the <literal>@<apilink class="org.gradle.api.tasks.CacheableTask"/></literal> annotation.
                Many built-in Gradle task types are cacheable, but custom task types are <emphasis>not</emphasis> cacheable by default.
            </para>
        </section>
    </section>
    <section id="sec:build_cache_known_issues">
        <title>Feedback and Known issues</title>
        <para>
            The build cache feature has known issues that may impact the performance, correctness and usability of your build when using the build cache.
            These issues will be corrected as this feature becomes stable.
        </para>
        <note>
            <para>
                When reporting issues with the build cache, please check if your issue is a known issue or related to a known issue.
            </para>
        </note>
        <table>
            <title>Correctness Issues</title>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Impact</th>
                    <th>Workaround</th>
                </tr>
            </thead>
            <tfoot>
                <row>
                    <entry>These issues may affect the correctness of your build when using the build cache. Please consider these issues carefully.</entry>
                </row>
            </tfoot>
            <tr>
                <td>Stale outputs left behind by older versions of a plugin or Gradle.</td>
                <td>Gradle does not automatically clean up outputs from other versions of Gradle. In some cases, changing the version of Gradle or changing the version of a plugin can lead to inconsistent builds.</td>
                <td>Use <literal>clean</literal> builds when publishing to a remote build cache.</td>
            </tr>
            <tr>
                <td>Mixed source projects with Java and another JVM language.</td>
                <td>If a project has both Java and another JVM language, the compilation tasks share an output directory. This causes Gradle to mix the result of one task into another. Depending on the order the tasks run, Gradle may delete all output from one of the tasks and cause broken builds.</td>
                <td>Only use one compilation task. For example, if you use Java and Groovy, put all Java sources in <literal>src/main/groovy</literal> too.</td>
            </tr>
            <tr>
                <td>Overlapping outputs.</td>
                <td>If two cacheable tasks share an output directory, Gradle does not reliably cache the results from either task.</td>
                <td>Disable caching for both tasks. You can detect this situation by using <ulink url="https://github.com/gradle/gradle/blob/master/gradle/overlappingTaskOutputsStatsInit.gradle">an init script</ulink>.</td>
            </tr>
            <tr>
                <td>Tracking the Java vendor implementation</td>
                <td>Gradle currently tracks the major version of Java that is used for compilation and test execution. If your build uses several Java implementations (IBM, OpenJDK, Oracle, etc) that are the same major version, Gradle will treat them all as equivalent and re-use outputs from any implementation.</td>
                <td>Only enable caching for builds that all use the same Java implementation or manually add the Java vendor as an input to compilation and test execution tasks.</td>
            </tr>
            <tr>
                <td>Tracking the Java version</td>
                <td>Gradle currently tracks the major version of Java (6 vs 7 vs 8) that is used for compilation and test execution. If your build expects to use several minor releases (1.8.0_102 vs 1.8.0_25), Gradle will treat all of these as equivalent and re-use outputs from any minor version. In our experience, bytecode produced by each major version is functionally equivalent.</td>
                <td>Manually add the full Java version as an input to compilation and test execution tasks.</td>
            </tr>
            <tr>
                <td>Changes in Gradle's file encoding that affects the build script</td>
                <td>Gradle can produce different task output based on the file encoding used by the JVM. Gradle will use a default file encoding based on the operating system if <literal>file.encoding</literal> is not explicitly set.</td>
                <td>Use UTF-8 file encoding everywhere by setting <literal>file.encoding</literal> to <literal>UTF8</literal> for the Gradle JVM.</td>
            </tr>
            <tr>
                <td>Javadoc ignores custom command-line options</td>
                <td>Gradle's Javadoc task does not take into account any changes to custom command-line options.</td>
                <td>You can add your custom options as input properties or disable caching of Javadoc.</td>
            </tr>
            <tr>
                <td>Copy-like tasks (Jar, Copy, Sync, Zip) do not consider changes to filter or expand in up-to-date checks.</td>
                <td>Changes to the parameters to filter or expand do not cause Copy-like tasks to be executed if that is the only change made to its inputs. See <ulink url="https://github.com/gradle/gradle/issues/1191">gradle/gradle#1191</ulink></td>
                <td>None. By default, these tasks are not considered cacheable.</td>
            </tr>
            <tr>
                <td>Copy-like tasks (Jar, Copy, Sync, Zip) do not consider changes to rename in up-to-date checks.</td>
                <td>Changes to the parameters to rename does not cause Copy-like tasks to be executed if that is the only change made to its inputs. See <ulink url="https://github.com/gradle/gradle/issues/1150">gradle/gradle#1150</ulink></td>
                <td>None. By default, these tasks are not considered cacheable.</td>
            </tr>
            <tr>
                <td>Copy-like tasks (Jar, Copy, Sync, Zip) do not consider system line endings when used with filter or expand.</td>
                <td>When filtering or expanding files while copying them, Copy-like tasks use the system line endings. This can cause files to have different line endings between operating systems. See <ulink url="https://github.com/gradle/gradle/issues/1151">gradle/gradle#1151</ulink></td>
                <td>None. By default, these tasks are not considered cacheable.</td>
            </tr>
        </table>
        <table>
            <title>Usability Issues</title>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Impact</th>
                    <th>Workaround</th>
                </tr>
            </thead>
            <tfoot>
                <row>
                    <entry>These issues may affect the number of cache hits you may get between machines.</entry>
                </row>
            </tfoot>
            <tr>
                <td>Line endings in build scripts files.</td>
                <td>Gradle calculates the build cache key based on the MD5 hash of the build script contents. If the line endings are different between developers and the CI servers, Gradle will calculate different build cache keys even when all other inputs to a task are the same.</td>
                <td>Check if your VCS will change source file line endings and configure it to have a consistent line ending across all platforms.</td>
            </tr>
            <tr>
                <td>Absolute paths in command-line arguments and system properties.</td>
                <td>Gradle provides ways of specifying the path sensitivity for individual task properties (see @<apilink class="org.gradle.api.tasks.PathSensitive"/>); however, it's common to need to pass absolute paths to tools or to tests. These kinds of inputs will cause cache misses because not every developer or CI server uses an identical absolute path to the root of a build.</td>
                <td>None.</td>
            </tr>
            <tr>
                <td><literal>--offline</literal> is not honored for the remote build cache.</td>
                <td>The built-in HTTP build cache ignores the offline flag.</td>
                <td>To completely disable task output caching, use <literal>--no-build-cache</literal>.</td>
            </tr>
            <tr>
                <td>Using JaCoCo disables caching of the Test task.</td>
                <td>The JaCoCo agent relies on appending to a shared output file that may be left over from a different test execution. If Gradle allowed Test tasks to be cacheable with the JaCoCo plugin, it could not guarantee the same results each time.</td>
                <td>None.</td>
            </tr>
            <tr>
                <td>Many errors when reading or writing to the build cache are considered fatal.</td>
                <td>When Gradle fails to store something into the build cache or fails to retrieve something from the build cache, the build may fail. This is usually only a problem with the built-in HTTP remote build cache.</td>
                <td>None.</td>
            </tr>
            <tr>
                <td>Limiting the size of the directory build cache.</td>
                <td>Currently, the directory build cache uses a Gradle-version specific directory that can grow unbounded.</td>
                <td>Periodically delete the directory build cache if it grows too large.</td>
            </tr>
            <tr>
                <td>Adding new actions to cacheable tasks in a build file makes that task sensitive to unrelated changes to the build file.</td>
                <td>Actions added by a plugin (from buildSrc or externally) do not have this problem because their classloader is restricted to the classpath of the plugin.</td>
                <td>Avoid adding actions to cacheable tasks in a build file.</td>
            </tr>
            <tr>
                <td>Modifying inputs or outputs during task execution.</td>
                <td>It's possible to modify a task's inputs or outputs during execution in ways that change the output of a task. This breaks incremental builds and can cause problems with the build cache.</td>
                <td>Use a configure task to finalize configuration for a given task. A configure task configures another task as part of its execution.</td>
            </tr>
            <tr>
                <td>Properties file in a jar file with volatile data.</td>
                <td>If a input file for a cacheable task changes on every build, such as it contains a timestamp, the task is unlikely to have very many build cache hits. If these files are contained in jars, it can affect the cacheability of compilation and test execution.</td>
                <td>You can produce consistently ordered properties files without a timestamp comment with <apilink class="org.gradle.api.tasks.WriteProperties"/>.</td>
            </tr>
            <tr>
                <td>Order of input files affects outputs.</td>
                <td>Some tools are sensitive to the order of its inputs and will produce slightly different output. Gradle will usually provide the order of files from the filesystem, which will be different across operating systems.</td>
                <td>Provide a stable order for tools affected by order.</td>
            </tr>
            <tr>
                <td>Missing inputs or outputs for cacheable tasks.</td>
                <td>It's very important that a cacheable task has a complete picture of its inputs so that the results from one build can be safely re-used somewhere else.
                    Missing task inputs can cause incorrect cache hits, where different results are treated as identical because the same cache key is used by both executions.
                    Missing task outputs can cause build failures if Gradle does not completely capture all outputs for a given task.</td>
                <td>Use TestKit/integration tests to check that a task is relocatable, produces the same outputs for identical inputs and captures all output files for the task.</td>
            </tr>
            <tr>
                <td>Antlr3 produces output with a timestamp.</td>
                <td>When generating Java source code with Antlr3 and the <xref linkend="antlr_plugin"/>, the generated sources contain a timestamp that reduces how often Java compilation will be cached. Antlr2 and Antlr4 are not affected.</td>
                <td>Use a custom template or remove the timestamp in a <literal>doLast</literal> action.</td>
            </tr>
        </table>
        <table>
            <title>Performance Issues</title>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Impact</th>
                    <th>Workaround</th>
                </tr>
            </thead>
            <tfoot>
                <row>
                    <entry>These issues may affect the performance of your build when using the build cache in some scenarios.</entry>
                </row>
            </tfoot>
            <tr>
                <td>Slow/hanging builds when on a poor connection with the remote build cache enabled.</td>
                <td>For every cacheable task, Gradle will attempt to find a corresponding cache entry in the remote cache. For large cache entries, it may be slower to download the previous result than to recreate it.</td>
                <td>Disable the build cache temporarily with <literal>--no-build-cache</literal>.</td>
            </tr>
            <tr>
                <td>No HTTP timeouts when using the built-in HTTP build cache as a remote build cache.</td>
                <td>Gradle does not enforce any HTTP timeout when downloading a cache entry. On a remote build cache that fails to respond, Gradle will wait indefinitely.</td>
                <td>None.</td>
            </tr>
            <tr>
                <td>Remote cache entries are downloaded each time they are needed.</td>
                <td>Gradle does not keep a local copy of remotely downloaded cache entries.</td>
                <td>None.</td>
            </tr>
        </table>
    </section>
</chapter>
