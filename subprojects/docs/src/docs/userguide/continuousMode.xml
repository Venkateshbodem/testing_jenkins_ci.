<!--
  ~ Copyright 2015 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='continuous_mode'>
    <title>The Gradle Continuous mode</title>
    <section id='what_is_continuous_mode'>
        <title>What is the Gradle Continuous mode?</title>
        <para>
            When run in continuous mode, Gradle will execute a build and determine any files that are inputs to that build.
            Gradle will then watch for changes to those input files, and re-execute the build when any file changes.
        </para>
    </section>
    <section>
        <title>Management and configuration</title>
        <section>
            <title>How do I enable the Gradle Continuous mode?</title>
            <para>
                The <literal>--watch</literal> command line switches enables continuous mode.

                TODO: Explain typical scenarios
            </para>
        </section>
    </section>
    <section id="continuous_mode_details">
        <title>Continuous mode details and known issues</title>
        <section>
            <title>Creating top-level source directories</title>
            <para>
                When in continuous mode, Gradle will only start watching those source directories that already exist at the start of the build.
                Let's say the <literal>src/test/groovy</literal> directory does not exist, and the user creates it after starting Gradle.
                Changes to this directory will go unnoticed.

                TODO: Explain details about subdirectories in already existing directories.
            </para>
        </section>
        <section>
            <title>Performance on Mac OS X</title>
            <para>
                Despite having the WatchService API since Java 7, there does not exist a native file system event based implementation for Mac OS X.
                See <ulink url="https://bugs.openjdk.java.net/browse/JDK-7133447">JDK-7133447</ulink> for the open issue in the Java bug tracker.
                The Java JVM must use a polling implementation of the WatchService API on Mac OS X to generate filesystem events. This method has a larger
                latency than the native implementations used on Windows and Linux.  It may also not scale well for very large projects with many source files
                and directories.
            </para>
        </section>
    </section>
</chapter>
