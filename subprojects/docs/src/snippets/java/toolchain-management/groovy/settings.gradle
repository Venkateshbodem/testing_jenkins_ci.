import java.util.Optional
import javax.inject.Inject

apply plugin: AzulPlugin
apply plugin: AdoptiumPlugin

// tag::toolchain-management[]
toolchainManagement {
    jdks { // <1>
        add("com_azul_zulu") // <2>
            {
                credentials {
                    username "user"
                    password "password"
                }
                authentication {
                    digest(BasicAuthentication)
                }
            } // <3>
        add("org_gradle_adopt_open_jdk") // <4>
    }
}
// end::toolchain-management[]

rootProject.name = 'toolchain-management'

abstract class AzulPlugin extends DummyPlugin {

    AzulPlugin() {
        super("com_azul_zulu")
    }
}

abstract class AdoptiumPlugin extends DummyPlugin {

    AdoptiumPlugin() {
        super("org_gradle_adopt_open_jdk")
    }
}

abstract class DummyPlugin implements Plugin<Settings> {

    private final String name;

    @Inject
    protected abstract JavaToolchainRepositoryRegistry getToolchainRepositoryRegistry();

    DummyPlugin(String name) {
        this.name = name
    }

    void apply(Settings settings) {
        settings.getPlugins().apply("jdk-toolchains");

        JavaToolchainRepositoryRegistry registry = getToolchainRepositoryRegistry();
        registry.register(name, DummyRepo.class)
    }
}

abstract class DummyRepo implements JavaToolchainRepository {
    @Override
    Optional<URI> toUri(JavaToolchainSpec spec, org.gradle.platform.BuildEnvironment env) {
        return Optional.empty();
    }
}