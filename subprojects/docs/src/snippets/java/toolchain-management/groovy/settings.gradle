import java.util.Optional
import javax.inject.Inject

apply plugin: AzulPlugin
apply plugin: AdoptiumPlugin

// tag::toolchain-management[]
toolchainManagement {
    jvm { // <1>
        resolvers {
            resolver('azul') { // <2>
                implementationClass = AzulRepo
                credentials {
                    username "user"
                    password "password"
                }
                authentication {
                    digest(BasicAuthentication)
                } // <3>
            }
            resolver('adoptium') { // <4>
                implementationClass = AdoptiumRepo
            }
        }
    }
}
// end::toolchain-management[]

rootProject.name = 'toolchain-management'

abstract class AzulPlugin extends DummyPlugin {

    AzulPlugin() {
        super(AzulRepo.class)
    }
}

abstract class AdoptiumPlugin extends DummyPlugin {

    AdoptiumPlugin() {
        super(AdoptiumRepo.class)
    }
}

abstract class DummyPlugin implements Plugin<Settings> {

    private final Class<JavaToolchainRepository> repositoryClass;

    @Inject
    protected abstract JavaToolchainRepositoryRegistry getToolchainRepositoryRegistry();

    DummyPlugin(Class<JavaToolchainRepository> repositoryClass) {
        this.repositoryClass = repositoryClass
    }

    void apply(Settings settings) {
        settings.getPlugins().apply("jvm-toolchains");

        JavaToolchainRepositoryRegistry registry = getToolchainRepositoryRegistry();
        registry.register(repositoryClass)
    }
}

abstract class AzulRepo implements JavaToolchainRepository {
    @Override
    Optional<URI> toUri(JavaToolchainRequest request) {
        return Optional.empty();
    }
}

abstract class AdoptiumRepo implements JavaToolchainRepository {
    @Override
    Optional<URI> toUri(JavaToolchainRequest request) {
        return Optional.empty();
    }
}